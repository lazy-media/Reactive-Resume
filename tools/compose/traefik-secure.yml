version: "3.8"

# In this Docker Compose example, we use Traefik to route requests to the app and storage containers in a secure manner (HTTPS).
# This example assumes you have a domain name (example.com) and a wildcard DNS record pointing to your server.
# The only exposed ports here are from Traefik (80 and 443). All non-secure requests are redirected to HTTPS.
# Note: Please change `example.com` to your domain name where necessary.

services:
  # Database (Postgres)
  postgres:
    image: postgres:16-alpine
    restart: ${RESTART_POLICY:-unless-stopped}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Storage (for image uploads)
  minio:
    image: minio/minio:latest
    restart: ${RESTART_POLICY:-unless-stopped}
    command: server /data
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    labels:
      - traefik.enable=true
      - traefik.http.routers.storage.rule=Host(`storage.example.com`)
      - traefik.http.routers.storage.entrypoints=websecure
      - traefik.http.routers.storage.tls.certresolver=letsencrypt
      - traefik.http.services.storage.loadbalancer.server.port=9000

  # Chrome Browser (for printing and previews)
  chrome:
    image: ghcr.io/browserless/chromium:latest
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      HEALTH: "true"
      TOKEN: ${CHROME_TOKEN:-chrome_token}
      PROXY_HOST: "printer.example.com"
      PROXY_PORT: 443
      PROXY_SSL: "true"
    labels:
      - traefik.enable=true
      - traefik.http.routers.printer.rule=Host(`printer.example.com`)
      - traefik.http.routers.printer.entrypoints=websecure
      - traefik.http.routers.printer.tls.certresolver=letsencrypt
      - traefik.http.services.printer.loadbalancer.server.port=3000

  app:
    image: ${IMAGE:-pickit420/reactive-resume}:${IMAGE_TAG:-latest}
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      - postgres
      - minio
      - chrome
    environment:
      # -- Environment Variables --
      PORT: ${APP_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}

      # -- URLs --
      PUBLIC_URL: ${PUBLIC_URL} # Set in .env file. Example: https://example.com
      STORAGE_URL: ${STORAGE_URL} # Set in .env file. Example: https://storage.example.com

      # -- Printer (Chrome) --
      CHROME_TOKEN: ${CHROME_TOKEN:-chrome_token}
      CHROME_URL: ${CHROME_URL} # Set in .env file. Example: wss://printer.example.com

      # -- Database (Postgres) --
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}

      # -- Auth --
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}

      # -- Emails --
      MAIL_FROM: ${MAIL_FROM}
      # SMTP_URL: smtp://${SMTP_USER}:${SMTP_PASS}@${SMTP_ADDR}:${SMTP_PORT} # Optional

      # -- Storage (Minio) --
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT:-minio}
      STORAGE_PORT: ${STORAGE_PORT:-9000}
      STORAGE_REGION: ${STORAGE_REGION:-us-east-1} # Optional
      STORAGE_BUCKET: ${STORAGE_BUCKET:-default}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY:-minioadmin}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY:-minioadmin}
      STORAGE_USE_SSL: ${STORAGE_USE_SSL} # Set in .env file. Default is "false"
      STORAGE_SKIP_BUCKET_CHECK: ${STORAGE_SKIP_BUCKET_CHECK} # Set in .env file. Default is "false"

      # -- Crowdin (Optional) --
      # CROWDIN_PROJECT_ID: ${CROWDIN_PROJECT_ID}
      # CROWDIN_PERSONAL_TOKEN: ${CROWDIN_PERSONAL_TOKEN}

      # -- Feature Flags (Optional) --
      # DISABLE_SIGNUPS: ${DISABLE_SIGNUPS} # Set in .env file. Default is "true", set to "false" to allow signups with email
      # DISABLE_EMAIL_AUTH: ${DISABLE_EMAIL_AUTH} # Set in .env file. Default is "true", set to "false" to allow email verification upon new user signup

      # -- GitHub (Optional) --
      # GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      # GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      # GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL}

      # -- Google (Optional) --
      # GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      # GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}

      # -- OpenID (Optional) --
      # VITE_OPENID_NAME: ${VITE_OPENID_NAME}
      # OPENID_AUTHORIZATION_URL: ${OPENID_AUTHORIZATION_URL}
      # OPENID_CALLBACK_URL: ${OPENID_CALLBACK_URL}
      # OPENID_CLIENT_ID: ${OPENID_CLIENT_ID}
      # OPENID_CLIENT_SECRET: ${OPENID_CLIENT_SECRET}
      # OPENID_ISSUER: ${OPENID_ISSUER}
      # OPENID_SCOPE: ${OPENID_SCOPE}
      # OPENID_TOKEN_URL: ${OPENID_TOKEN_URL}
      # OPENID_USER_INFO_URL: ${OPENID_USER_INFO_URL}
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`example.com`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=3000

  traefik:
    image: traefik
    command:
      - --api=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=noreply@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # Let's Encrypt Staging Server (for testing)
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

      # Redirect all HTTP requests to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  minio_data:
  postgres_data:
  letsencrypt_data:
