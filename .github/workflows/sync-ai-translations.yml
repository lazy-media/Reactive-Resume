name: AI Translations with LibreTranslate

on:
  workflow_dispatch:
  push:
    paths:
      - 'apps/client/src/locales/**/messages.po'
      - '.github/workflows/auto-translate-messages-po.yml'

jobs:
  translate:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
      LIBRETRANSLATE_IMAGE: "libretranslate/libretranslate:latest"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Start LibreTranslate Docker Container
        run: |
          docker run -d -p 5000:5000 --name libretranslate $LIBRETRANSLATE_IMAGE
          # Wait for LibreTranslate to be ready
          for i in {1..30}; do
            if curl -s http://localhost:5000/health | grep -q '"status":"ok"'; then
              echo "LibreTranslate ready"; break
            fi
            sleep 2
          done

      - name: Install requirements
        run: |
          pip install polib requests black

      - name: Translate empty msgstr in messages.po files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          import os
          import glob
          import polib
          import requests
          import re
          import subprocess

          def detect_language_team(po):
              # Returns the language team (e.g., "Afrikaans") or None
              for m in po.metadata:
                  if m.startswith("Language-Team:"):
                      return po.metadata[m]
              return None

          def get_locale_from_path(path):
              # apps/client/src/locales/af-ZA/messages.po -> af-ZA
              return os.path.basename(os.path.dirname(path))

          def get_iso_lang(locale):
              # Map locale to ISO 639-1 code (af-ZA -> af, etc.)
              # LibreTranslate supports: https://libretranslate.com/languages
              return locale.split('-')[0]

          def format_msgstr(s):
              # Always wrap in quotes and escape properly for .po files
              # Escape internal quotes and newlines for PO format
              s = s.replace('"', '\\"')
              return f'"{s}"'

          def prettier_format(po_path):
              # Use black to format python (only for .py) or just ensure trailing newline for .po
              with open(po_path, "rb+") as f:
                  content = f.read().rstrip() + b"\n"
                  f.seek(0)
                  f.write(content)
                  f.truncate()

          files = glob.glob("apps/client/src/locales/*/messages.po")
          changed_files = []
          for po_path in files:
              po = polib.pofile(po_path, encoding="utf-8")
              locale = get_locale_from_path(po_path)
              iso_lang = get_iso_lang(locale)
              meta_team = detect_language_team(po)
              target_lang = iso_lang

              # LibreTranslate wants short code, e.g. 'af', not 'af-ZA'
              for entry in po:
                  if not entry.msgid or entry.msgid.strip() == "":
                      continue
                  if entry.msgstr and entry.msgstr.strip() != "":
                      continue  # already translated
                  # LibreTranslate API
                  resp = requests.post(
                      "http://localhost:5000/translate",
                      json={
                          "q": entry.msgid,
                          "source": "en",
                          "target": target_lang,
                          "format": "text"
                      },
                      timeout=30
                  )
                  if resp.status_code == 200:
                      translated = resp.json().get("translatedText", "")
                      entry.msgstr = format_msgstr(translated)
                  else:
                      print(f"Failed to translate '{entry.msgid}': {resp.text}")

              po.save(po_path)
              prettier_format(po_path)
              changed_files.append(po_path)

          if changed_files:
              subprocess.run(["git", "checkout", "-B", "l10n"])
              subprocess.run(["git", "add"] + changed_files)
              subprocess.run(["git", "config", "user.name", "github-actions[bot]"])
              subprocess.run(["git", "config", "user.email", "github-actions[bot]@users.noreply.github.com"])
              subprocess.run(["git", "commit", "-m", "chore(l10n): auto-translate messages.po files"])
              subprocess.run(["git", "push", "-f", "origin", "l10n"])

              # Create PR if not exists
              import requests
              headers = {
                  "Authorization": f"Bearer {os.environ['GH_TOKEN']}",
                  "Accept": "application/vnd.github+json"
              }
              repo = os.environ["GITHUB_REPOSITORY"]
              pr_url = f"https://api.github.com/repos/{repo}/pulls"
              pr_resp = requests.get(pr_url, headers=headers, params={"head": "l10n", "base": "main", "state": "open"})
              if pr_resp.ok and pr_resp.json() and len(pr_resp.json()) > 0:
                  print("PR already exists")
              else:
                  r = requests.post(pr_url, headers=headers, json={
                      "title": "Auto-translate messages.po files",
                      "head": "l10n",
                      "base": "main",
                      "body": "This PR was created automatically to add translations to empty msgstr fields in messages.po files using LibreTranslate.",
                  })
                  if r.status_code not in (200, 201):
                      print("Failed to create PR:", r.text)
